/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 * aiba-central-backend
 * AIBA Ï§ëÏïôÏÑúÎ≤Ñ Î∞±ÏóîÎìúÏûÖÎãàÎã§.
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  InfiniteData,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { customAxios } from "../../mutator/customAxios";
import type { ErrorType } from "../../mutator/customAxios";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const pingControllerPing = (
  options?: SecondParameter<typeof customAxios>,
  signal?: AbortSignal,
) => {
  return customAxios<void>({ url: `/ping`, method: "get", signal }, options);
};

export const getPingControllerPingQueryKey = () => {
  return [`/ping`] as const;
};

export const getPingControllerPingInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof pingControllerPing>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof pingControllerPing>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customAxios>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPingControllerPingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof pingControllerPing>>
  > = ({ signal }) => pingControllerPing(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof pingControllerPing>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PingControllerPingInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof pingControllerPing>>
>;
export type PingControllerPingInfiniteQueryError = ErrorType<unknown>;

export const usePingControllerPingInfinite = <
  TData = InfiniteData<Awaited<ReturnType<typeof pingControllerPing>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof pingControllerPing>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customAxios>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPingControllerPingInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getPingControllerPingQueryOptions = <
  TData = Awaited<ReturnType<typeof pingControllerPing>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof pingControllerPing>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customAxios>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPingControllerPingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof pingControllerPing>>
  > = ({ signal }) => pingControllerPing(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof pingControllerPing>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PingControllerPingQueryResult = NonNullable<
  Awaited<ReturnType<typeof pingControllerPing>>
>;
export type PingControllerPingQueryError = ErrorType<unknown>;

export const usePingControllerPing = <
  TData = Awaited<ReturnType<typeof pingControllerPing>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof pingControllerPing>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customAxios>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPingControllerPingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
